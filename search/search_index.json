{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Safe Water Project Guide Welcome to the Safe Water MKDocs! This site provides first-time users background about this project and guide to deploying and using the website. Quick Blurb of this Project Charles River Watershed Association monitors Charles river for diseases and originally had out-of-comissioned PHP website that keep tracks of its temperature and volume flow. This project aims to update the website wih a new website using flask framework. More information about deployment, background, and how it works in other web pages.","title":"Home"},{"location":"#safe-water-project-guide","text":"Welcome to the Safe Water MKDocs! This site provides first-time users background about this project and guide to deploying and using the website.","title":"Safe Water Project Guide"},{"location":"#quick-blurb-of-this-project","text":"Charles River Watershed Association monitors Charles river for diseases and originally had out-of-comissioned PHP website that keep tracks of its temperature and volume flow. This project aims to update the website wih a new website using flask framework. More information about deployment, background, and how it works in other web pages.","title":"Quick Blurb of this Project"},{"location":"background/","text":"Background Charles River Via the EPA: The Charles River flows 80 miles from Hopkinton, Mass. to Boston Harbor. The Charles River is the most prominent urban river in New England. It is a major source of recreation and a readily-available connection to the natural world for residents of the Boston metropolitan area. The entire Charles River drains rain and melted snow from a watershed area of 310 square miles. Throughout most of the 20th century, the Charles River in Boston was known for its contaminated water. The reputation of the Charles River was popularized out of state by the song Dirty Water by the Standells , which peaked at #11 on the Billboard singles chart on June 11, 1965. (The song has a chorus containing the lines \"Well I love that dirty water / Boston you're my home.\") Starting in the late 80s, efforts were made to start cleaning up the Charles River. In 1988, as the result of a lawsuit from the Conservation Law Foundation (CLF), the Massachusetts Water Resources Authority (MWRA) created a combined sewer overflow system to address sewage in the Charles River. In 1995, the CRWA, EPA, municipalities, and Massachusetts state agencies launched the Clean Charles Initiative, which included a report card for the Charles River that is issued by EPA scientists annually. The first grade the Charles River received was a D for the year 1995. The Charles River's grade peaked at A- in 2013 and 2018. Charles River Watershed Association The Charles River Watershed Association (\"CRWA\") was formed in 1965, the same year that Dirty Water peaked at #11 on the Billboard singles chart. Via the CRWA's website: CRWA is one of the country\u2019s oldest watershed organizations and has figured prominently in major cleanup and protection efforts. Since our earliest days of advocacy, we have worked with government officials and citizen groups from 35 Massachusetts watershed towns from Hopkinton to Boston. The EPA also relies on sample data collected by the CRWA to construct its report card. Flagging Program Of the many services that the CRWA provides to the greater Boston community, one of those is monitoring whether it is safe to swim and/or boat in the Charles River. Traditionally, this was accomplished by running some data through a predictive model hosted on a PHP website and outputting the results through that PHP website. However, that website is currently out of commission. At Code for Boston, we attempted to fix the website, although we have had trouble maintaining a steady stream of PHP expertise inside the \"Safe Water Project\" (the flagging website's parent project). So we are going to be focusing now on building the website from scratch in Python. See the \"Stack Justification\" documentation for why we chose this path, and why we chose Python + Flask. Code for Boston Code for Boston is a volunteer Civic Technology meetup. We are part of the Code for America Brigade network, and are made up of developers, designers, data geeks, citizen activists, and many others who use creative technology to solve civic and social problems. We aim to find creative means of technology to help better the lives of individuals in our communities. We meet every Tuesday More Information on CRWA This WBUR article provides a great overview of the CRWA and its monitoring programs. All volunteers should read it! The CRWA periodically sends a report to the Governor of Massachusetts on the status of the Charles River. This is the CRWA's latest report. More Information on Code For Boston If you are interested more about our organization, go to our website . If you wish to contact the project team Join our Slack channel : #water . Meet us on Tuesday Night for our general meetings by Signing up to attend Code for Boston events here . More contact information on various projects in this tab of our website . Search for our Safe Water Project which will provide link to our github project and google hangout/video chat link.","title":"Background"},{"location":"background/#background","text":"","title":"Background"},{"location":"background/#charles-river","text":"Via the EPA: The Charles River flows 80 miles from Hopkinton, Mass. to Boston Harbor. The Charles River is the most prominent urban river in New England. It is a major source of recreation and a readily-available connection to the natural world for residents of the Boston metropolitan area. The entire Charles River drains rain and melted snow from a watershed area of 310 square miles. Throughout most of the 20th century, the Charles River in Boston was known for its contaminated water. The reputation of the Charles River was popularized out of state by the song Dirty Water by the Standells , which peaked at #11 on the Billboard singles chart on June 11, 1965. (The song has a chorus containing the lines \"Well I love that dirty water / Boston you're my home.\") Starting in the late 80s, efforts were made to start cleaning up the Charles River. In 1988, as the result of a lawsuit from the Conservation Law Foundation (CLF), the Massachusetts Water Resources Authority (MWRA) created a combined sewer overflow system to address sewage in the Charles River. In 1995, the CRWA, EPA, municipalities, and Massachusetts state agencies launched the Clean Charles Initiative, which included a report card for the Charles River that is issued by EPA scientists annually. The first grade the Charles River received was a D for the year 1995. The Charles River's grade peaked at A- in 2013 and 2018.","title":"Charles River"},{"location":"background/#charles-river-watershed-association","text":"The Charles River Watershed Association (\"CRWA\") was formed in 1965, the same year that Dirty Water peaked at #11 on the Billboard singles chart. Via the CRWA's website: CRWA is one of the country\u2019s oldest watershed organizations and has figured prominently in major cleanup and protection efforts. Since our earliest days of advocacy, we have worked with government officials and citizen groups from 35 Massachusetts watershed towns from Hopkinton to Boston. The EPA also relies on sample data collected by the CRWA to construct its report card.","title":"Charles River Watershed Association"},{"location":"background/#flagging-program","text":"Of the many services that the CRWA provides to the greater Boston community, one of those is monitoring whether it is safe to swim and/or boat in the Charles River. Traditionally, this was accomplished by running some data through a predictive model hosted on a PHP website and outputting the results through that PHP website. However, that website is currently out of commission. At Code for Boston, we attempted to fix the website, although we have had trouble maintaining a steady stream of PHP expertise inside the \"Safe Water Project\" (the flagging website's parent project). So we are going to be focusing now on building the website from scratch in Python. See the \"Stack Justification\" documentation for why we chose this path, and why we chose Python + Flask.","title":"Flagging Program"},{"location":"background/#code-for-boston","text":"Code for Boston is a volunteer Civic Technology meetup. We are part of the Code for America Brigade network, and are made up of developers, designers, data geeks, citizen activists, and many others who use creative technology to solve civic and social problems. We aim to find creative means of technology to help better the lives of individuals in our communities. We meet every Tuesday","title":"Code for Boston"},{"location":"background/#more-information-on-crwa","text":"This WBUR article provides a great overview of the CRWA and its monitoring programs. All volunteers should read it! The CRWA periodically sends a report to the Governor of Massachusetts on the status of the Charles River. This is the CRWA's latest report.","title":"More Information on CRWA"},{"location":"background/#more-information-on-code-for-boston","text":"If you are interested more about our organization, go to our website . If you wish to contact the project team Join our Slack channel : #water . Meet us on Tuesday Night for our general meetings by Signing up to attend Code for Boston events here . More contact information on various projects in this tab of our website . Search for our Safe Water Project which will provide link to our github project and google hangout/video chat link.","title":"More Information on Code For Boston"},{"location":"deployment/","text":"Production Deployment The following tools are required to deploy the website: Heroku CLI Git Deploying for the first time If you've never deployed the app from your computer, follow these instructions. Note: the project name here is assumed to be crwa-flagging . If you have not already done so, pull the repository to your computer, and then change your directory to it. git clone https://github.com/codeforboston/flagging.git cd ./flagging Login to Heroku, and add Heroku as a remote repo using Heroku's CLI: heroku login heroku git:remote -a crwa-flagging Add the vault password as an environment variable to Heroku. heroku config:set VAULT_PASSWORD=replace_me_with_pw Now deploy the app! git push heroku master Now try the following: heroku logs --tail If everything worked out, you should see the following at or near the bottom of the log: 2020-06-13T23:17:54.000000+00:00 app[api]: Build succeeded If you see insted see something like 2020-06-13T23:17:54.000000+00:00 heroku[web.1]: State changed from starting to crashed , then read the rest of the output to see what happened (there will likely be a lot of stuff, so dig through it). The most common error when deploying to production will be a RuntimeError: Unable to load the vault; bad password provided which is self-explanatory. Update the password, and the website will automatically attempt to redeploy. If you don't see that error, then try to self-diagnose. Go see the website for yourself! Subsequent deployments Heroku doesn't allow you to redeploy the website unless you create a new commit. Add some updates if you need to with git add . then git commit -m \"describe your changes here\" . Once you have done that, Heroku will simply redeploy the site when you merge your working branch: git push heroku master Staging and Production Split It is recommended, though not required, that you have both \"staging\" and \"production\" environments for the website (see here for an explanation), and furthermore it is recommended you deploy to staging and play around with the website to see if it looks right before you deploy to prodution. Managing effectively two separate Heroku apps from a single repository requires a bit of knowledge about how git works. Basically what you're doing is connecting to two separate remote git repositories. The default remote repo is called heroku and it was created by Heroku's CLI. But since you now have two Heroku remotes, the Heroku CLI doesn't know what it's supposed to name the 2nd one. So you have to manually name it using git. Run the following command to create a staging environment if it does not already exist. heroku create crwa-flagging-staging Once it exists, add the staging environment as a remote; check to make sure all the remotes look right. The heroku remote should correspond with the production environment, and the staging remote should correspond with the staging environment you just created. git remote add staging https://git.heroku.com/crwa-flagging-staging.git git remote -v Now all of your heroku commands are going to require specifying the app, but the steps to deploy in staging are otherwise similar to the production deployment: heroku config:set --app crwa-flagging-staging VAULT_PASSWORD=replace_me_with_pw git push staging master heroku logs --app crwa-flagging-staging --tail Check out the website and make sure it looks right.","title":"Deployment"},{"location":"deployment/#production-deployment","text":"The following tools are required to deploy the website: Heroku CLI Git","title":"Production Deployment"},{"location":"deployment/#deploying-for-the-first-time","text":"If you've never deployed the app from your computer, follow these instructions. Note: the project name here is assumed to be crwa-flagging . If you have not already done so, pull the repository to your computer, and then change your directory to it. git clone https://github.com/codeforboston/flagging.git cd ./flagging Login to Heroku, and add Heroku as a remote repo using Heroku's CLI: heroku login heroku git:remote -a crwa-flagging Add the vault password as an environment variable to Heroku. heroku config:set VAULT_PASSWORD=replace_me_with_pw Now deploy the app! git push heroku master Now try the following: heroku logs --tail If everything worked out, you should see the following at or near the bottom of the log: 2020-06-13T23:17:54.000000+00:00 app[api]: Build succeeded If you see insted see something like 2020-06-13T23:17:54.000000+00:00 heroku[web.1]: State changed from starting to crashed , then read the rest of the output to see what happened (there will likely be a lot of stuff, so dig through it). The most common error when deploying to production will be a RuntimeError: Unable to load the vault; bad password provided which is self-explanatory. Update the password, and the website will automatically attempt to redeploy. If you don't see that error, then try to self-diagnose. Go see the website for yourself!","title":"Deploying for the first time"},{"location":"deployment/#subsequent-deployments","text":"Heroku doesn't allow you to redeploy the website unless you create a new commit. Add some updates if you need to with git add . then git commit -m \"describe your changes here\" . Once you have done that, Heroku will simply redeploy the site when you merge your working branch: git push heroku master","title":"Subsequent deployments"},{"location":"deployment/#staging-and-production-split","text":"It is recommended, though not required, that you have both \"staging\" and \"production\" environments for the website (see here for an explanation), and furthermore it is recommended you deploy to staging and play around with the website to see if it looks right before you deploy to prodution. Managing effectively two separate Heroku apps from a single repository requires a bit of knowledge about how git works. Basically what you're doing is connecting to two separate remote git repositories. The default remote repo is called heroku and it was created by Heroku's CLI. But since you now have two Heroku remotes, the Heroku CLI doesn't know what it's supposed to name the 2nd one. So you have to manually name it using git. Run the following command to create a staging environment if it does not already exist. heroku create crwa-flagging-staging Once it exists, add the staging environment as a remote; check to make sure all the remotes look right. The heroku remote should correspond with the production environment, and the staging remote should correspond with the staging environment you just created. git remote add staging https://git.heroku.com/crwa-flagging-staging.git git remote -v Now all of your heroku commands are going to require specifying the app, but the steps to deploy in staging are otherwise similar to the production deployment: heroku config:set --app crwa-flagging-staging VAULT_PASSWORD=replace_me_with_pw git push staging master heroku logs --app crwa-flagging-staging --tail Check out the website and make sure it looks right.","title":"Staging and Production Split"},{"location":"system/","text":"Website Explained Diagram Explanation Here is a tentative explanantion of how the website works. Currently it is a flask web application that creates a main web application using create_app() function and retrieve configuration options from config.py and keys from the vault.zip . Then joins mini web apps by registering blueprints found inside the blueprints directory. Particularly the main web app will be joining web app flagging.py to retrieve data from USGS and Hobolink api. With this information, we generate predictive data based on multiple logistic models to determine if river is safe or not. The website displays that data calling render_template() which renders output_model.html with the Jinja template engine. Moreover, we save that data inside a SQL database hosted in heroku, which will also where we deploy the flask web application.","title":"System"},{"location":"system/#website-explained","text":"","title":"Website Explained"},{"location":"system/#diagram","text":"","title":"Diagram"},{"location":"system/#explanation","text":"Here is a tentative explanantion of how the website works. Currently it is a flask web application that creates a main web application using create_app() function and retrieve configuration options from config.py and keys from the vault.zip . Then joins mini web apps by registering blueprints found inside the blueprints directory. Particularly the main web app will be joining web app flagging.py to retrieve data from USGS and Hobolink api. With this information, we generate predictive data based on multiple logistic models to determine if river is safe or not. The website displays that data calling render_template() which renders output_model.html with the Jinja template engine. Moreover, we save that data inside a SQL database hosted in heroku, which will also where we deploy the flask web application.","title":"Explanation"}]}